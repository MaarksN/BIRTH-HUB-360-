import React, { useState, useEffect, useMemo, useRef } from 'react';

// --- Firebase ---
import { initializeApp } from 'firebase/app';
import { 
    getFirestore, 
    collection, 
    onSnapshot, 
    addDoc, 
    doc, 
    updateDoc, 
    deleteDoc,
    query,
    serverTimestamp,
    orderBy
} from 'firebase/firestore';

// --- Chart.js ---
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler,
} from 'chart.js';
import { Bar, Line, Doughnut } from 'react-chartjs-2';

// --- Icons (Lucide React) ---
import { 
    LayoutDashboard, Contact, Briefcase, CheckSquare, BarChart3, Lightbulb, 
    BrainCircuit, Settings, LogOut, Plus, Search, Pencil, Trash2, Building2, 
    Phone, Mail, Video, Utensils, ArrowUp, Sparkles, Copy, Check, X, Target, 
    DollarSign, UserCircle, Bell, PlugZap, Users, CalendarDays, ChevronLeft, ChevronRight,
    Send, Download, Calendar as CalendarIcon, GripVertical
} from 'lucide-react';

// --- Markdown ---
import { marked } from 'marked';


// --- Chart.js Registration ---
ChartJS.register(
  CategoryScale, LinearScale, BarElement, PointElement, LineElement, ArcElement, 
  Title, Tooltip, Legend, Filler
);
ChartJS.defaults.color = '#94a3b8';
ChartJS.defaults.font.family = 'Poppins, sans-serif';


// =================================================================================
// FIREBASE CONFIGURATION 
// =================================================================================
// ATENÇÃO: Substitua este objeto pela configuração do seu projeto Firebase.
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);


// =================================================================================
// HELPER COMPONENTS & HOOKS
// =================================================================================

// Hook customizado para buscar dados do Firestore em tempo real
function useFirestoreCollection(collectionName, order = null) {
    const [data, setData] = useState([]);

    useEffect(() => {
        if (!collectionName) {
            setData([]);
            return;
        }
        let q;
        if (order) {
           q = query(collection(db, collectionName), orderBy(order, 'desc'));
        } else {
           q = query(collection(db, collectionName));
        }
        
        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const items = [];
            querySnapshot.forEach((doc) => {
                items.push({ id: doc.id, ...doc.data() });
            });
            setData(items);
        }, (error) => {
            console.error("Error fetching collection:", error);
        });

        return () => unsubscribe();
    }, [collectionName, order]);

    return data;
}


const NavLink = ({ icon, title, page, currentPage, setCurrentPage }) => {
    const Icon = icon;
    const isActive = currentPage === page;
    const activeClasses = 'bg-indigo-600 text-white';
    const inactiveClasses = 'text-slate-400 hover:bg-gray-800 hover:text-white';

    return (
        <a 
            href="#" 
            className={`nav-link p-3 rounded-lg ${isActive ? activeClasses : inactiveClasses}`} 
            title={title} 
            onClick={(e) => { e.preventDefault(); setCurrentPage(page); }}
        >
            <Icon />
        </a>
    );
};

// =================================================================================
// HEADER COMPONENT
// =================================================================================
const AppHeader = ({ pageTitle }) => {
    const [searchQuery, setSearchQuery] = useState('');
    const [showNotifications, setShowNotifications] = useState(false);
    const notificationsRef = useRef(null);

    const handleSearch = (e) => {
        setSearchQuery(e.target.value);
        // Em um app real, aqui você faria a busca (ex: com Algolia ou Cloud Functions)
        console.log("Buscando por:", e.target.value);
    };

    // Fechar dropdown de notificações ao clicar fora
    useEffect(() => {
        function handleClickOutside(event) {
            if (notificationsRef.current && !notificationsRef.current.contains(event.target)) {
                setShowNotifications(false);
            }
        }
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [notificationsRef]);
    
    // Mock data for notifications
    const notifications = [
        { id: 1, text: "Nova tarefa 'Follow-up' atribuída a você.", time: "5 min atrás" },
        { id: 2, text: "Carlos comentou no negócio 'Projeto Phoenix'.", time: "1 hora atrás" },
        { id: 3, text: "Lembrete: Reunião com a InovaTech hoje às 15h.", time: "3 horas atrás" },
    ];

    return (
        <header className="flex flex-col md:flex-row justify-between md:items-center mb-8 gap-4 px-8 pt-8">
            <div>
                <h1 className="text-3xl font-bold text-white">{pageTitle.title}</h1>
                <p className="text-slate-400">{pageTitle.subtitle}</p>
            </div>
            <div className="flex items-center gap-4">
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-slate-500" />
                    <input 
                        type="text" 
                        placeholder="Pesquisa global..." 
                        className="w-full md:w-64 bg-gray-800 border border-gray-700 rounded-lg pl-10 pr-4 py-2 text-white focus:ring-2 focus:ring-amber-400"
                        value={searchQuery}
                        onChange={handleSearch}
                    />
                </div>
                <div className="relative" ref={notificationsRef}>
                    <button onClick={() => setShowNotifications(!showNotifications)} className="p-2 rounded-full text-slate-400 hover:bg-gray-800 hover:text-white relative">
                        <Bell />
                        <span className="absolute top-0 right-0 w-3 h-3 bg-red-500 rounded-full border-2 border-gray-900"></span>
                    </button>
                    {showNotifications && (
                        <div className="absolute top-full right-0 mt-2 w-80 bg-gray-800 rounded-xl border border-gray-700 shadow-lg z-20">
                           <div className="p-4 border-b border-gray-700">
                               <h3 className="font-semibold text-white">Notificações</h3>
                           </div>
                           <div className="p-2 max-h-96 overflow-y-auto">
                               {notifications.map(n => (
                                   <div key={n.id} className="p-3 rounded-lg hover:bg-gray-700/50">
                                       <p className="text-sm text-slate-300">{n.text}</p>
                                       <p className="text-xs text-slate-500 mt-1">{n.time}</p>
                                   </div>
                               ))}
                           </div>
                        </div>
                    )}
                </div>
            </div>
        </header>
    );
};


// =================================================================================
// MODAL COMPONENTS
// =================================================================================

const EmailModal = ({ contact, onClose }) => {
    const [subject, setSubject] = useState('');
    const [body, setBody] = useState('');
    
    const handleSendEmail = async () => {
        if (!subject || !body) {
            alert("Por favor, preencha o assunto e o corpo do e-mail.");
            return;
        }
        
        console.log("--- SIMULANDO ENVIO DE E-MAIL ---");
        console.log("Para:", contact.email);
        console.log("Assunto:", subject);
        console.log("Corpo:", body);
        
        // Salva o e-mail no histórico do contato no Firestore
        const historyRef = collection(db, `contacts/${contact.id}/history`);
        await addDoc(historyRef, {
            type: 'email',
            subject: subject,
            body: body,
            timestamp: serverTimestamp()
        });
        
        alert("E-mail enviado e registrado no histórico!");
        onClose();
    };

    return (
        <div className="fixed inset-0 bg-gray-900/80 backdrop-blur-sm flex items-center justify-center p-4 z-50">
            <div className="bg-gray-800 w-full max-w-2xl rounded-2xl border border-gray-700 shadow-xl p-8">
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-2xl font-bold text-white">Enviar E-mail</h2>
                    <button onClick={onClose} className="text-slate-400 hover:text-white"><X/></button>
                </div>
                <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-slate-400">Para</label>
                        <p className="p-3 bg-gray-900/50 rounded-lg text-white">{contact.name} &lt;{contact.email}&gt;</p>
                    </div>
                    <div>
                        <label htmlFor="subject" className="block text-sm font-medium text-slate-400 mb-1">Assunto</label>
                        <input type="text" id="subject" value={subject} onChange={(e) => setSubject(e.target.value)} className="w-full bg-gray-900/50 border border-gray-700 rounded-lg p-3 text-white focus:ring-2 focus:ring-amber-400"/>
                    </div>
                    <div>
                        <label htmlFor="body" className="block text-sm font-medium text-slate-400 mb-1">Mensagem</label>
                        <textarea id="body" rows="8" value={body} onChange={(e) => setBody(e.target.value)} className="w-full bg-gray-900/50 border border-gray-700 rounded-lg p-3 text-white focus:ring-2 focus:ring-amber-400"></textarea>
                    </div>
                </div>
                <div className="mt-8 text-right">
                    <button onClick={handleSendEmail} className="flex items-center gap-2 px-6 py-2 text-sm font-bold text-gray-900 bg-amber-400 rounded-lg hover:bg-amber-300 float-right">
                        <Send className="w-4 h-4"/>Enviar
                    </button>
                </div>
            </div>
        </div>
    );
};

// =================================================================================
// PAGE COMPONENTS
// =================================================================================

const DashboardPage = () => {
    const initialKpis = [
        { id: 'kpi1', icon: Briefcase, title: 'Novos Negócios (Mês)', value: '42', color: 'indigo' },
        { id: 'kpi2', icon: Target, title: 'Taxa de Conversão', value: '28,5%', color: 'amber' },
        { id: 'kpi3', icon: DollarSign, title: 'Faturamento (Mês)', value: 'R$ 110.500', color: 'green' },
        { id: 'kpi4', icon: CheckSquare, title: 'Tarefas Atrasadas', value: '1', color: 'red' },
    ];
    
    const [kpis, setKpis] = useState(initialKpis);
    const dragItem = useRef(null);
    const dragOverItem = useRef(null);

    const handleSort = () => {
        let _kpis = [...kpis];
        const draggedItemContent = _kpis.splice(dragItem.current, 1)[0];
        _kpis.splice(dragOverItem.current, 0, draggedItemContent);
        dragItem.current = null;
        dragOverItem.current = null;
        setKpis(_kpis);
    };

    const colorClasses = {
        indigo: { bg: 'bg-indigo-500/10', text: 'text-indigo-400' },
        amber: { bg: 'bg-amber-500/10', text: 'text-amber-400' },
        green: { bg: 'bg-green-500/10', text: 'text-green-400' },
        red: { bg: 'bg-red-500/10', text: 'text-red-400' },
    };

    const dealsData = {
        labels: ['Mar', 'Abr', 'Mai', 'Jun'],
        datasets: [
            { label: 'Ganhos', data: [5, 8, 12, 10], backgroundColor: 'rgba(74, 222, 128, 0.7)' },
            { label: 'Perdidos', data: [3, 4, 2, 1], backgroundColor: 'rgba(248, 113, 113, 0.7)' }
        ]
    };
    const dealsOptions = { responsive: true, scales: { x: { stacked: true }, y: { stacked: true } } };

    return (
        <div className="p-8">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                {kpis.map((kpi, index) => {
                    const Icon = kpi.icon;
                    const colors = colorClasses[kpi.color];
                    return (
                        <div 
                            key={kpi.id} 
                            className="bg-gray-800 p-6 rounded-xl border border-gray-700 flex items-center gap-4 relative cursor-grab"
                            draggable
                            onDragStart={() => dragItem.current = index}
                            onDragEnter={() => dragOverItem.current = index}
                            onDragEnd={handleSort}
                            onDragOver={(e) => e.preventDefault()}
                        >
                            <GripVertical className="absolute left-1 top-1/2 -translate-y-1/2 text-gray-600"/>
                            <div className={`p-3 rounded-full ${colors.bg} ${colors.text}`}><Icon /></div>
                            <div>
                                <p className="text-sm text-slate-400">{kpi.title}</p>
                                <p className="text-2xl font-bold text-white">{kpi.value}</p>
                            </div>
                        </div>
                    );
                })}
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-2 bg-gray-800 p-6 rounded-xl border border-gray-700">
                    <h3 className="text-lg font-semibold text-white mb-4">Negócios Ganhos vs. Perdidos</h3>
                    <Bar data={dealsData} options={dealsOptions} />
                </div>
                <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
                     <h3 className="text-lg font-semibold text-white mb-4">Próximas Tarefas</h3>
                     <div className="space-y-4">
                        <div className="flex items-center gap-3"><div className="w-8 h-8 flex-shrink-0 bg-blue-500/20 text-blue-400 flex items-center justify-center rounded-full"><Mail className="w-5 h-5"/></div><div className="flex-grow"><p className="font-semibold text-white">Enviar proposta para Soluções Futuras</p><p className="text-xs text-amber-400">Vence hoje</p></div></div>
                        <div className="flex items-center gap-3"><div className="w-8 h-8 flex-shrink-0 bg-green-500/20 text-green-400 flex items-center justify-center rounded-full"><Video className="w-5 h-5"/></div><div className="flex-grow"><p className="font-semibold text-white">Demo para a Empresa Alfa</p><p className="text-xs text-slate-400">Vence amanhã</p></div></div>
                        <div className="flex items-center gap-3 opacity-60"><div className="w-8 h-8 flex-shrink-0 bg-red-500/20 text-red-400 flex items-center justify-center rounded-full"><Phone className="w-5 h-5"/></div><div className="flex-grow"><p className="font-semibold text-white line-through">Follow-up com a InovaTech</p><p className="text-xs text-red-400">Venceu ontem</p></div></div>
                     </div>
                </div>
            </div>
        </div>
    );
};

const ContactsPage = () => {
    const contacts = useFirestoreCollection('contacts');
    const [selectedContact, setSelectedContact] = useState(null);
    const [isEmailModalOpen, setIsEmailModalOpen] = useState(false);
    
    // Hook para buscar o histórico do contato selecionado
    const contactHistory = useFirestoreCollection(
        selectedContact ? `contacts/${selectedContact.id}/history` : null, 'timestamp'
    );
    
    useEffect(() => {
        if (contacts.length > 0 && !selectedContact) {
            setSelectedContact(contacts[0]);
        }
    }, [contacts, selectedContact]);

    const handleSelectContact = (contact) => {
        setSelectedContact(contact);
    };

    return (
        <div className="flex h-full p-8 pt-0">
            {isEmailModalOpen && selectedContact && <EmailModal contact={selectedContact} onClose={() => setIsEmailModalOpen(false)} />}
            <div className="flex-1">
                <div className="bg-gray-800 rounded-xl border border-gray-700 overflow-hidden h-full">
                    <table className="w-full text-sm text-left text-slate-300">
                         <thead className="bg-gray-900/50 text-xs text-slate-400 uppercase">
                            <tr>
                                <th scope="col" className="px-6 py-3">Nome</th>
                                <th scope="col" className="px-6 py-3">Empresa</th>
                                <th scope="col" className="px-6 py-3">E-mail</th>
                            </tr>
                        </thead>
                        <tbody>
                            {contacts.map(contact => (
                                <tr key={contact.id} onClick={() => handleSelectContact(contact)} className={`border-b border-gray-700 hover:bg-gray-900/30 cursor-pointer ${selectedContact?.id === contact.id ? 'bg-indigo-600/20' : ''}`}>
                                    <td className="px-6 py-4 font-semibold text-white">{contact.name}</td>
                                    <td className="px-6 py-4">{contact.company}</td>
                                    <td className="px-6 py-4">{contact.email}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
            {selectedContact && (
                <aside className="w-96 flex-shrink-0 ml-8 bg-gray-800 border border-gray-700 rounded-xl p-6 flex flex-col">
                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-xl font-bold text-white">{selectedContact.name}</h2>
                        <button onClick={() => setSelectedContact(null)} className="text-slate-400 hover:text-white"><X/></button>
                    </div>
                    <div className="flex-1 overflow-y-auto">
                        <p className="text-sm text-slate-400">Empresa: <span className="text-white">{selectedContact.company}</span></p>
                        <p className="text-sm text-slate-400">Telefone: <span className="text-white">{selectedContact.phone}</span></p>
                        <button onClick={() => setIsEmailModalOpen(true)} className="w-full flex items-center justify-center gap-2 mt-4 px-4 py-2 text-sm font-bold text-gray-900 bg-amber-400 rounded-lg hover:bg-amber-300">
                            <Mail className="w-4 h-4"/> Enviar E-mail
                        </button>
                        <hr className="border-gray-700 my-6"/>
                        <h3 className="font-semibold text-white mb-4">Histórico de Comunicação</h3>
                        <div className="space-y-4">
                           {contactHistory.map(item => (
                               <div key={item.id} className="p-3 bg-gray-900/50 rounded-lg">
                                   <p className="font-bold text-sm text-amber-400">{item.subject}</p>
                                   <p className="text-xs text-slate-300 mt-1">{item.body}</p>
                                   <p className="text-xs text-slate-500 text-right mt-2">
                                       {item.timestamp ? new Date(item.timestamp.seconds * 1000).toLocaleString('pt-BR') : 'Enviando...'}
                                   </p>
                               </div>
                           ))}
                        </div>
                    </div>
                </aside>
            )}
        </div>
    );
};


const DealsPage = () => {
    const deals = useFirestoreCollection('deals');
    const [stages, setStages] = useState({
        'qualificacao': [], 'demonstracao': [], 'proposta': [], 'negociacao': [], 'ganho': [], 'perdido': []
    });

    useEffect(() => {
        const sortedStages = {
            'qualificacao': [], 'demonstracao': [], 'proposta': [], 'negociacao': [], 'ganho': [], 'perdido': []
        };
        deals.forEach(deal => {
            if (sortedStages[deal.stage]) {
                sortedStages[deal.stage].push(deal);
            }
        });
        setStages(sortedStages);
    }, [deals]);

    const handleDragStart = (e, dealId) => {
        e.dataTransfer.setData("dealId", dealId);
    };

    const handleDrop = async (e, targetStage) => {
        const dealId = e.dataTransfer.getData("dealId");
        const dealRef = doc(db, "deals", dealId);
        try {
            await updateDoc(dealRef, { stage: targetStage });
        } catch (error) {
            console.error("Error updating deal stage: ", error);
        }
    };

    const handleDragOver = (e) => {
        e.preventDefault();
    };

    const stageTitles = {
        'qualificacao': 'Qualificação', 'demonstracao': 'Demonstração', 'proposta': 'Proposta',
        'negociacao': 'Negociação', 'ganho': 'Ganho', 'perdido': 'Perdido'
    };

    return (
        <div className="flex flex-col p-8 pt-0 h-full">
            <div className="flex-1 flex gap-6 overflow-x-auto pb-4">
                {Object.entries(stages).map(([stageKey, dealsInStage]) => (
                    <div 
                        key={stageKey}
                        className="w-80 flex-shrink-0 bg-gray-800 rounded-xl border border-gray-700 flex flex-col"
                        onDrop={(e) => handleDrop(e, stageKey)}
                        onDragOver={handleDragOver}
                    >
                        <div className="p-4 border-b border-gray-700">
                            <h3 className="font-semibold text-white">{stageTitles[stageKey]}</h3>
                            <p className="text-sm text-slate-400">{dealsInStage.length} negócios</p>
                        </div>
                        <div className="p-4 space-y-4 overflow-y-auto">
                            {dealsInStage.map(deal => (
                                <div
                                    key={deal.id}
                                    className="bg-gray-900 p-4 rounded-lg border border-gray-700 cursor-grab"
                                    draggable
                                    onDragStart={(e) => handleDragStart(e, deal.id)}
                                >
                                    <p className="font-semibold text-white">{deal.name}</p>
                                    <p className="text-sm text-slate-400 mt-1">
                                        {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(deal.value || 0)}
                                    </p>
                                    <div className="flex items-center gap-2 mt-2">
                                        <Building2 className="w-4 h-4 text-slate-500" />
                                        <span className="text-xs text-slate-400">{deal.company}</span>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

const AnalyticsPage = () => {
    // Dados para os gráficos (estáticos por enquanto)
    const revenueData = { 
        labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'], 
        datasets: [
            { label: 'Faturamento', data: [50000, 65000, 80000, 75000, 90000, 110000], borderColor: '#facc15', backgroundColor: 'rgba(250, 204, 21, 0.1)', fill: true, tension: 0.4 }, 
            { label: 'Meta', data: [70000, 75000, 80000, 85000, 90000, 95000], borderColor: '#6366f1', borderDash: [5, 5], fill: false, tension: 0.4 }
        ] 
    };
    
    const handleExportCSV = () => {
        const headers = ['Mês', 'Faturamento', 'Meta'];
        const rows = revenueData.labels.map((label, index) => [
            label,
            revenueData.datasets[0].data[index],
            revenueData.datasets[1].data[index]
        ]);
        
        let csvContent = "data:text/csv;charset=utf-8," 
            + headers.join(",") + "\n" 
            + rows.map(e => e.join(",")).join("\n");
            
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "relatorio_faturamento.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        <div className="p-8 pt-0">
            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 mb-8">
                <h3 className="text-lg font-semibold text-white mb-4">Filtros do Relatório</h3>
                <div className="flex flex-col md:flex-row gap-4 items-center">
                    <div className="flex items-center gap-2">
                         <CalendarIcon className="w-5 h-5 text-slate-400"/>
                         <label htmlFor="start-date" className="text-sm font-medium text-slate-400">De:</label>
                         <input type="date" id="start-date" className="bg-gray-900/50 border border-gray-700 rounded-lg p-2 text-white focus:ring-2 focus:ring-amber-400"/>
                    </div>
                    <div className="flex items-center gap-2">
                         <label htmlFor="end-date" className="text-sm font-medium text-slate-400">Até:</label>
                         <input type="date" id="end-date" className="bg-gray-900/50 border border-gray-700 rounded-lg p-2 text-white focus:ring-2 focus:ring-amber-400"/>
                    </div>
                    <div className="flex-grow"></div>
                    <button onClick={handleExportCSV} className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-gray-700 rounded-lg hover:bg-gray-600">
                        <Download className="w-4 h-4"/> Exportar para CSV
                    </button>
                </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="bg-gray-800 p-6 rounded-xl border border-gray-700"><h3 className="text-lg font-semibold text-white mb-4">Faturamento vs. Meta</h3><Line data={revenueData} options={{ responsive: true, scales: { y: { beginAtZero: true } } }}/></div>
                <div className="bg-gray-800 p-6 rounded-xl border border-gray-700"><h3 className="text-lg font-semibold text-white mb-4">Ranking de Vendedores 🏆</h3>{/* ... */}</div>
            </div>
        </div>
    );
};

const TasksPage = () => {
    const tasks = useFirestoreCollection('tasks');
    
    const toggleTask = async (task) => {
        const taskRef = doc(db, "tasks", task.id);
        await updateDoc(taskRef, {
            completed: !task.completed
        });
    };

    return (
        <div className="p-8 pt-0">
            <div className="space-y-4">
                {tasks.map(task => (
                    <div key={task.id} className={`task-item flex items-center gap-4 p-4 bg-gray-800 rounded-lg border border-gray-700 hover:border-amber-400 transition-colors duration-300 ${task.completed ? 'opacity-50' : ''}`}>
                        <input type="checkbox" checked={task.completed} onChange={() => toggleTask(task)} className="h-5 w-5 rounded bg-gray-700 border-gray-600 text-indigo-500 focus:ring-indigo-600"/>
                        <div className="w-10 h-10 flex-shrink-0 bg-blue-500/20 text-blue-400 flex items-center justify-center rounded-full" title="E-mail"><Mail/></div>
                        <div className="flex-grow">
                            <p className={`font-semibold text-white ${task.completed ? 'line-through' : ''}`}>{task.title}</p>
                            <p className="text-xs text-slate-400">Associado a: <a href="#" className="hover:underline">{task.associatedTo}</a></p>
                        </div>
                        <div className="flex-shrink-0"><p className="text-sm font-semibold text-slate-300">{task.dueDate}</p></div>
                    </div>
                ))}
            </div>
        </div>
    );
};

const CalendarPage = () => {
    const [currentDate, setCurrentDate] = useState(new Date());
    const deals = useFirestoreCollection('deals'); // ATENÇÃO: Seus negócios precisam ter um campo 'closeDate' (ex: "2024-05-20")
    const tasks = useFirestoreCollection('tasks'); // ATENÇÃO: Suas tarefas precisam ter um campo 'dueDate' (ex: "2024-05-25")

    const eventsByDate = useMemo(() => {
        const events = {};
        deals.forEach(deal => {
            if (deal.closeDate) {
                const date = deal.closeDate;
                if (!events[date]) events[date] = [];
                events[date].push({ type: 'deal', title: deal.name });
            }
        });
        tasks.forEach(task => {
            if (task.dueDate) {
                const date = task.dueDate;
                if (!events[date]) events[date] = [];
                events[date].push({ type: 'task', title: task.title });
            }
        });
        return events;
    }, [deals, tasks]);

    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    const daysInMonth = endOfMonth.getDate();
    const startDayOfWeek = startOfMonth.getDay();

    const calendarDays = [];
    for (let i = 0; i < startDayOfWeek; i++) {
        calendarDays.push(<div key={`empty-${i}`} className="border-r border-b border-gray-700"></div>);
    }
    for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const dayEvents = eventsByDate[dateStr] || [];

        calendarDays.push(
            <div key={day} className="border-r border-b border-gray-700 p-2 min-h-[120px]">
                <div className="font-semibold text-white">{day}</div>
                <div className="mt-1 space-y-1">
                    {dayEvents.map((event, index) => (
                        <div key={index} className={`text-xs px-2 py-1 rounded ${event.type === 'deal' ? 'bg-green-500/20 text-green-300' : 'bg-blue-500/20 text-blue-300'}`}>
                           {event.title}
                        </div>
                    ))}
                </div>
            </div>
        );
    }

    const changeMonth = (offset) => {
        setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + offset, 1));
    };

    const monthName = currentDate.toLocaleString('pt-BR', { month: 'long' });
    const year = currentDate.getFullYear();

    return (
        <div className="p-8 pt-0 flex flex-col h-full">
            <div className="flex items-center gap-4 mb-8">
                    <button onClick={() => changeMonth(-1)} className="p-2 rounded-md hover:bg-gray-700"><ChevronLeft/></button>
                    <h2 className="text-xl font-semibold text-white w-48 text-center capitalize">{`${monthName} de ${year}`}</h2>
                    <button onClick={() => changeMonth(1)} className="p-2 rounded-md hover:bg-gray-700"><ChevronRight/></button>
            </div>
            <div className="flex-1 grid grid-cols-7 bg-gray-800 rounded-xl border border-gray-700 overflow-hidden">
                {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map(day => (
                    <div key={day} className="text-center font-bold text-slate-400 p-3 border-r border-b border-gray-700">{day}</div>
                ))}
                {calendarDays}
            </div>
        </div>
    );
};

// =================================================================================
// MAIN APP COMPONENT
// =================================================================================
export default function App() {
    const [currentPage, setCurrentPage] = useState('dashboard');
    
    const pageDetails = {
        'dashboard': { title: 'Dashboard Principal 🚀', subtitle: 'Bem-vindo de volta, Ana! Aqui está um resumo da sua performance.' },
        'contatos': { title: 'Gerenciador de Contatos 👥', subtitle: 'Visualize e gerencie todos os seus contatos em um só lugar.' },
        'negocios': { title: 'Pipeline de Vendas 💼', subtitle: 'Arraste e solte os negócios para atualizar seu progresso.' },
        'tarefas': { title: 'Gerenciador de Tarefas 📝', subtitle: 'Sua central de produtividade para não perder nenhum prazo.' },
        'calendario': { title: 'Calendário 📅', subtitle: 'Visão unificada de negócios e tarefas.' },
        'analytics': { title: 'Analytics de Vendas 📊', subtitle: 'Analise a performance e tome decisões baseadas em dados.' },
        'ideias': { title: 'Hub de Ideias 💡', subtitle: 'Sugira, vote e acompanhe as inovações que vão moldar nosso futuro.'},
        'propostas': { title: 'Gerador de Propostas 📄', subtitle: 'Crie propostas comerciais completas e personalizadas.' }
    };
    
    const navItems = [
        { icon: LayoutDashboard, title: 'Dashboard', page: 'dashboard' },
        { icon: Contact, title: 'Contatos', page: 'contatos' },
        { icon: Briefcase, title: 'Negócios', page: 'negocios' },
        { icon: CheckSquare, title: 'Tarefas', page: 'tarefas' },
        { icon: CalendarDays, title: 'Calendário', page: 'calendario' },
        { icon: BarChart3, title: 'Analytics', page: 'analytics' },
        { icon: Lightbulb, title: 'Hub de Ideias', page: 'ideias' },
        { icon: BrainCircuit, title: 'Gerador de Propostas', page: 'propostas' },
    ];
    
    const renderPage = () => {
        switch (currentPage) {
            case 'dashboard': return <DashboardPage />;
            case 'contatos': return <ContactsPage />;
            case 'negocios': return <DealsPage />;
            case 'analytics': return <AnalyticsPage />;
            case 'tarefas': return <TasksPage />;
            case 'calendario': return <CalendarPage />;
            default: return <DashboardPage />;
        }
    };

    return (
        <div className="flex h-screen bg-gray-900 text-slate-300 overflow-hidden" style={{fontFamily: "'Poppins', sans-serif"}}>
            {/* ========== SIDEBAR DE NAVEGAÇÃO ========== */}
            <aside className="w-20 flex-shrink-0 bg-gray-950 border-r border-gray-800 flex flex-col items-center py-6">
                <a href="#" className="mb-10">
                    <svg width="40" height="40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="logoGradient" x1="0%" y1="0%" x2="100%" y2="100%"><stop offset="0%" style={{stopColor:'#4f46e5'}} /><stop offset="50%" style={{stopColor:'#a78bfa'}} /><stop offset="100%" style={{stopColor:'#facc15'}} /></linearGradient></defs><circle cx="12" cy="12" r="11" stroke="url(#logoGradient)" strokeWidth="2"/></svg>
                </a>
                <nav className="flex flex-col items-center gap-4">
                    {navItems.map(item => (
                        <NavLink key={item.page} {...item} currentPage={currentPage} setCurrentPage={setCurrentPage} />
                    ))}
                </nav>
                <div className="mt-auto flex flex-col items-center gap-4">
                     <NavLink icon={Settings} title="Configurações" page="settings" currentPage={currentPage} setCurrentPage={setCurrentPage} />
                     <a href="#" className="p-3 rounded-lg text-slate-400 hover:bg-gray-800 hover:text-white" title="Sair"><LogOut /></a>
                </div>
            </aside>

            {/* ========== CONTEÚDO PRINCIPAL ========== */}
            <main className="flex-1 flex flex-col overflow-y-auto">
                <AppHeader pageTitle={pageDetails[currentPage]} />
                <div className="flex-1 overflow-y-auto">
                   {renderPage()}
                </div>
            </main>
        </div>
    );
}

